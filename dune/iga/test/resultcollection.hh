// SPDX-FileCopyrightText: 2022-2024 The dune-iga developers mueller@ibb.uni-stuttgart.de
// SPDX-License-Identifier: LGPL-3.0-or-later

#pragma once

#include <dune/common/exceptions.hh>
#include <Eigen/Core>


// assume px = py = 2 with C1 continuity, resulting in 9 CPs per element
template <int refinementLevel, int numTestPos>
auto shapeFunctionsAndDerivativesIGAResults([[maybe_unused]] int eleCounter) {
  if constexpr (refinementLevel == 0) {
    std::array<Eigen::Vector<double, 9>, numTestPos> expectN = {
        {{0.0277777777777778, 0.0148860662461735, 0.0019943547145692, 0.2073361559760487, 0.1111111111111111,
          0.0148860662461735, 0.3868945341743197, 0.2073361559760487, 0.0277777777777778},
         {0.0625, 0.125, 0.0625, 0.125, 0.25, 0.125, 0.0625, 0.125, 0.0625},
         {1., 0., 0., 0., -0., -0., 0., 0., 0.},
         {0., -0., 1., -0., 0., 0., 0., -0., 0.},
         {0., 0., 0., -0., -0., -0., 1., 0., 0.},
         {0., -0., 0., -0., 0., -0., 0., -0., 1.}}
    };

    std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdxi = {
        {{-0.070441621801729, 0.0515668461264172, 0.0188747756753119, -0.5257834230632086, 0.3849001794597505,
          0.1408832436034581, -0.9811252243246882, 0.7182335127930839, 0.2628917115316043},
         {-0.25, -0., 0.25, -0.5, 0., 0.5, -0.25, 0., 0.25},
         {-2., 2., 0., -0., 0., -0., -0., 0., 0.},
         {0., -2., 2., -0., -0., 0., 0., -0., 0.},
         {-0., 0., 0., 0., -0., -0., -2., 2., 0.},
         {0., -0., 0., -0., 0., -0., 0., -2., 2.}}
    };

    std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdeta = {
        {{-0.2628917115316043, -0.1408832436034581, -0.0188747756753119, -0.7182335127930839, -0.3849001794597505,
          -0.0515668461264172, 0.9811252243246882, 0.5257834230632086, 0.070441621801729},
         {-0.25, -0.5, -0.25, 0., 0., 0., 0.25, 0.5, 0.25},
         {-2., 0., 0., 2., -0., 0., 0., 0., 0.},
         {0., -0., -2., -0., 0., 2., 0., -0., 0.},
         {0., 0., 0., -2., -0., 0., 2., 0., 0.},
         {0., -0., 0., -0., 0., -2., 0., -0., 2.}}
    };

    std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxixi = {
        {{0.0893163974770409, -0.1786327949540818, 0.0893163974770409, 0.6666666666666666, -1.3333333333333333,
          0.6666666666666666, 1.2440169358562925, -2.488033871712585, 1.2440169358562925},
         {0.5, -1., 0.5, 1., -2., 1., 0.5, -1., 0.5},
         {2., -4., 2., 0., -0., 0., 0., -0., 0.},
         {2., -4., 2., 0., -0., 0., 0., -0., 0.},
         {0., -0., 0., 0., 0., 0., 2., -4., 2.},
         {0., -0., 0., 0., 0., 0., 2., -4., 2.}}
    };

    std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdetaeta = {
        {{1.2440169358562925, 0.6666666666666666, 0.0893163974770409, -2.488033871712585, -1.3333333333333333,
          -0.1786327949540818, 1.2440169358562925, 0.6666666666666666, 0.0893163974770409},
         {0.5, 1., 0.5, -1., -2., -1., 0.5, 1., 0.5},
         {2., 0., 0., -4., -0., -0., 2., 0., 0.},
         {0., 0., 2., -0., 0., -4., 0., 0., 2.},
         {2., 0., 0., -4., -0., -0., 2., 0., 0.},
         {0., 0., 2., -0., 0., -4., 0., 0., 2.}}
    };

    std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxieta = {
        {{0.6666666666666666, -0.4880338717125849, -0.1786327949540818, 1.8213672050459183, -1.3333333333333335,
          -0.4880338717125849, -2.488033871712585, 1.8213672050459183, 0.6666666666666666},
         {1., -0., -1., 0., 0., 0., -1., 0., 1.},
         {4., -4., 0., -4., 4., 0., -0., 0., 0.},
         {0., 4., -4., -0., -4., 4., 0., -0., 0.},
         {0., 0., 0., 4., -4., 0., -4., 4., 0.},
         {0., 0., 0., -0., 4., -4., 0., -4., 4.}}
    };

    return std::make_tuple(expectN, expectdNdxi, expectdNdeta, expectddNdxixi, expectddNdetaeta, expectddNdxieta);
  } else if constexpr (refinementLevel == 1) {
    if (eleCounter == 0) {
      std::array<Eigen::Vector<double, 9>, numTestPos> expectN = {
          {{0.0277777777777778, 0.0158832436034581, 0.0009971773572846, 0.4007834230632086, 0.2291666666666667,
            0.0143874775675312, 0.1934472670871598, 0.1106125224324688, 0.0069444444444444},
           {0.0625, 0.15625, 0.03125, 0.15625, 0.390625, 0.078125, 0.03125, 0.078125, 0.015625},
           {1., 0., 0., 0., 0., 0., 0., 0., 0.},
           {0., 0.5, 0.5, 0., 0., 0., 0., 0., 0.},
           {0., 0., 0., 0.5, 0., 0., 0.5, 0., 0.},
           {0., 0., 0., 0., 0.25, 0.25, 0., 0.25, 0.25}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdxi = {
          {{-0.070441621801729, 0.0610042339640731, 0.0094373878376559, -1.0163460352255527, 0.8801814855409225,
            0.1361645496846301, -0.4905626121623441, 0.424839684279443, 0.0657229278829011},
           {-0.25, 0.125, 0.125, -0.625, 0.3125, 0.3125, -0.125, 0.0625, 0.0625},
           {-2., 2., 0., -0., 0., 0., -0., 0., 0.},
           {0., -1., 1., 0., -0., 0., 0., -0., 0.},
           {-0., 0., 0., -1., 1., 0., -1., 1., 0.},
           {0., -0., 0., 0., -0.5, 0.5, 0., -0.5, 0.5}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdeta = {
          {{-0.2628917115316043, -0.150320631441114, -0.0094373878376559, -0.2276709006307398, -0.1301814855409225,
            -0.0081730176127763, 0.4905626121623441, 0.2805021169820366, 0.0176104054504323},
           {-0.25, -0.625, -0.125, 0.125, 0.3125, 0.0625, 0.125, 0.3125, 0.0625},
           {-2., -0., -0., 2., 0., 0., 0., 0., 0.},
           {-0., -1., -1., 0., 1., 1., 0., 0., 0.},
           {0., 0., 0., -1., -0., -0., 1., 0., 0.},
           {0., -0., 0., 0., -0.5, -0.5, 0., 0.5, 0.5}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxixi = {
          {{0.0893163974770409, -0.1339745962155614, 0.0446581987385205, 1.2886751345948129, -1.9330127018922193,
            0.6443375672974064, 0.6220084679281462, -0.9330127018922193, 0.3110042339640731},
           {0.5, -0.75, 0.25, 1.25, -1.875, 0.625, 0.25, -0.375, 0.125},
           {2., -3., 1., 0., -0., 0., 0., -0., 0.},
           {2., -3., 1., 0., -0., 0., 0., -0., 0.},
           {0., -0., 0., 1., -1.5, 0.5, 1., -1.5, 0.5},
           {0., -0., 0., 1., -1.5, 0.5, 1., -1.5, 0.5}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdetaeta = {
          {{1.2440169358562924, 0.7113248654051871, 0.0446581987385205, -1.8660254037844386, -1.0669872981077807,
            -0.0669872981077807, 0.6220084679281462, 0.3556624327025936, 0.0223290993692602},
           {0.5, 1.25, 0.25, -0.75, -1.875, -0.375, 0.25, 0.625, 0.125},
           {2., 0., 0., -3., -0., -0., 1., 0., 0.},
           {0., 1., 1., -0., -1.5, -1.5, 0., 0.5, 0.5},
           {2., 0., 0., -3., -0., -0., 1., 0., 0.},
           {0., 1., 1., -0., -1.5, -1.5, 0., 0.5, 0.5}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxieta = {
          {{0.6666666666666667, -0.5773502691896258, -0.0893163974770409, 0.5773502691896258, -0.5, -0.0773502691896258,
            -1.2440169358562924, 1.0773502691896258, 0.1666666666666667},
           {1., -0.5, -0.5, -0.5, 0.25, 0.25, -0.5, 0.25, 0.25},
           {4., -4., -0., -4., 4., 0., -0., 0., 0.},
           {-0., 2., -2., 0., -2., 2., 0., -0., 0.},
           {-0., 0., 0., 2., -2., -0., -2., 2., 0.},
           {0., -0., 0., -0., 1., -1., 0., -1., 1.}}
      };
      return std::make_tuple(expectN, expectdNdxi, expectdNdeta, expectddNdxixi, expectddNdetaeta, expectddNdxieta);
    } else if (eleCounter == 1) {
      std::array<Eigen::Vector<double, 9>, numTestPos> expectN = {
          {{0.0138888888888889, 0.0287749551350624, 0.0019943547145692, 0.2003917115316043, 0.4151709006307398,
            0.0287749551350624, 0.0967236335435799, 0.2003917115316043, 0.0138888888888889},
           {0.03125, 0.15625, 0.0625, 0.078125, 0.390625, 0.15625, 0.015625, 0.078125, 0.03125},
           {0.5, 0.5, 0., 0., 0., 0., 0., 0., 0.},
           {0., 0., 1., 0., 0., 0., 0., 0., 0.},
           {0., 0., 0., 0.25, 0.25, 0., 0.25, 0.25, 0.},
           {0., 0., 0., 0., 0., 0.5, 0., 0., 0.5}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdxi = {
          {{-0.0352208109008645, 0.0163460352255527, 0.0188747756753119, -0.5081730176127763, 0.2358439182435161,
            0.2723290993692602, -0.245281306081172, 0.1138354503153699, 0.1314458557658021},
           {-0.125, -0.125, 0.25, -0.3125, -0.3125, 0.625, -0.0625, -0.0625, 0.125},
           {-1., 1., 0., -0., 0., 0., -0., 0., 0.},
           {0., -2., 2., 0., -0., 0., -0., -0., 0.},
           {-0., 0., 0., -0.5, 0.5, 0., -0.5, 0.5, 0.},
           {0., -0., 0., 0., -1., 1., -0., -1., 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdeta = {
          {{-0.1314458557658021, -0.2723290993692602, -0.0188747756753119, -0.1138354503153699, -0.2358439182435161,
            -0.0163460352255527, 0.245281306081172, 0.5081730176127763, 0.0352208109008645},
           {-0.125, -0.625, -0.25, 0.0625, 0.3125, 0.125, 0.0625, 0.3125, 0.125},
           {-1., -1., -0., 1., 1., 0., 0., 0., 0.},
           {-0., -0., -2., 0., 0., 2., 0., 0., 0.},
           {0., 0., 0., -0.5, -0.5, -0., 0.5, 0.5, 0.},
           {0., 0., 0., -0., -0., -1., 0., 0., 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxixi = {
          {{0.0446581987385205, -0.1339745962155614, 0.0893163974770409, 0.6443375672974064, -1.9330127018922193,
            1.2886751345948129, 0.3110042339640731, -0.9330127018922193, 0.6220084679281462},
           {0.25, -0.75, 0.5, 0.625, -1.875, 1.25, 0.125, -0.375, 0.25},
           {1., -3., 2., 0., -0., 0., 0., -0., 0.},
           {1., -3., 2., 0., -0., 0., 0., -0., 0.},
           {0., 0., 0., 0.5, -1.5, 1., 0.5, -1.5, 1.},
           {0., 0., 0., 0.5, -1.5, 1., 0.5, -1.5, 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdetaeta = {
          {{0.6220084679281462, 1.2886751345948129, 0.0893163974770409, -0.9330127018922193, -1.9330127018922193,
            -0.1339745962155614, 0.3110042339640731, 0.6443375672974064, 0.0446581987385205},
           {0.25, 1.25, 0.5, -0.375, -1.875, -0.75, 0.125, 0.625, 0.25},
           {1., 1., 0., -1.5, -1.5, -0., 0.5, 0.5, 0.},
           {0., 0., 2., -0., -0., -3., 0., 0., 1.},
           {1.0, 1.0, 0., -1.5, -1.5, 0., 0.5, 0.5, 0.},
           {0., 0., 2., -0., 0., -3., 0., 0., 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxieta = {
          {{0.3333333333333333, -0.1547005383792515, -0.1786327949540818, 0.2886751345948129, -0.1339745962155614,
            -0.1547005383792515, -0.6220084679281462, 0.2886751345948129, 0.3333333333333333},
           {0.5, 0.5, -1., -0.25, -0.25, 0.5, -0.25, -0.25, 0.5},
           {2., -2., -0., -2., 2., -0., -0., 0., 0.},
           {-0., 4., -4., -0., -4., 4., -0., -0., 0.},
           {-0., 0., 0., 1., -1., 0., -1., 1., 0.},
           {0., -0., 0., 0., 2., -2., -0., -2., 2.}}
      };
      return std::make_tuple(expectN, expectdNdxi, expectdNdeta, expectddNdxixi, expectddNdetaeta, expectddNdxieta);
    } else if (eleCounter == 2) {
      std::array<Eigen::Vector<double, 9>, numTestPos> expectN = {
          {{0.0138888888888889, 0.007941621801729, 0.0004985886786423, 0.2212250448649376, 0.1264957660359269,
            0.007941621801729, 0.3868945341743197, 0.2212250448649376, 0.0138888888888889},
           {0.03125, 0.078125, 0.015625, 0.15625, 0.390625, 0.078125, 0.0625, 0.15625, 0.03125},
           {0.5, 0., 0., 0.5, 0., 0., 0., 0., 0.},
           {0., 0.25, 0.25, 0., 0.25, 0.25, 0., 0., 0.},
           {0., 0., 0., 0., 0., 0., 1., 0., 0.},
           {0., 0., 0., 0., 0., 0., 0., 0.5, 0.5}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdxi = {
          {{-0.0352208109008645, 0.0305021169820366, 0.004718693918828, -0.5610042339640731, 0.4858439182435161,
            0.075160315720557, -0.9811252243246881, 0.849679368558886, 0.1314458557658021},
           {-0.125, 0.0625, 0.0625, -0.625, 0.3125, 0.3125, -0.25, 0.125, 0.125},
           {-1., 1., 0., -1., 1., 0., -0., 0., 0.},
           {0., -0.5, 0.5, 0., -0.5, 0.5, 0., -0., 0.},
           {-0., 0., 0., -0., 0., 0., -2., 2., 0.},
           {0., -0., 0., 0., -0., 0., 0., -1., 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdeta = {
          {{-0.1314458557658021, -0.075160315720557, -0.004718693918828, -0.849679368558886, -0.4858439182435161,
            -0.0305021169820366, 0.9811252243246881, 0.5610042339640731, 0.0352208109008645},
           {-0.125, -0.3125, -0.0625, -0.125, -0.3125, -0.0625, 0.25, 0.625, 0.125},
           {-1., -0., -0., 1., 0., 0., 0., 0., 0.},
           {-0., -0.5, -0.5, 0., 0.5, 0.5, 0., 0., 0.},
           {0., 0., 0., -2., -0., -0., 2., 0., 0.},
           {0., 0., 0., -0., -1., -1., 0., 1., 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxixi = {
          {{0.0446581987385205, -0.0669872981077807, 0.0223290993692602, 0.7113248654051871, -1.0669872981077807,
            0.3556624327025936, 1.2440169358562924, -1.8660254037844386, 0.6220084679281462},
           {0.25, -0.375, 0.125, 1.25, -1.875, 0.625, 0.5, -0.75, 0.25},
           {1., -1.5, 0.5, 1., -1.5, 0.5, 0., -0., 0.},
           {1., -1.5, 0.5, 1., -1.5, 0.5, 0., 0., 0.},
           {0., -0., 0., 0., -0., 0., 2., -3., 1.},
           {0., -0., 0., 0., 0., 0., 2., -3., 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdetaeta = {
          {{0.6220084679281462, 0.3556624327025936, 0.0223290993692602, -1.8660254037844386, -1.0669872981077807,
            -0.0669872981077807, 1.2440169358562924, 0.7113248654051871, 0.0446581987385205},
           {0.25, 0.625, 0.125, -0.75, -1.875, -0.375, 0.5, 1.25, 0.25},
           {1., 0., 0., -3., -0., -0., 2., 0., 0.},
           {0., 0.5, 0.5, 0., -1.5, -1.5, 0., 1.0, 1.0},
           {1., 0., 0., -3., -0., -0., 2., 0., 0.},
           {0., 0.5, 0.5, -0., -1.5, -1.5, 0., 1., 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxieta = {
          {{0.3333333333333333, -0.2886751345948129, -0.0446581987385205, 2.1547005383792515, -1.8660254037844386,
            -0.2886751345948129, -2.4880338717125849, 2.1547005383792515, 0.3333333333333333},
           {0.5, -0.25, -0.25, 0.5, -0.25, -0.25, -1., 0.5, 0.5},
           {2., -2., -0., -2., 2., 0., -0., -0., 0.},
           {0., 1., -1., 0., -1., 1., 0., 0., 0.},
           {-0., -0., 0., 4., -4., -0., -4., 4., 0.},
           {0., 0., 0., -0., 2., -2., 0., -2., 2.}}
      };
      return std::make_tuple(expectN, expectdNdxi, expectdNdeta, expectddNdxixi, expectddNdetaeta, expectddNdxieta);
    } else {
      std::array<Eigen::Vector<double, 9>, numTestPos> expectN = {
          {{0.0069444444444444, 0.0143874775675312, 0.0009971773572846, 0.1106125224324688, 0.2291666666666667,
            0.0158832436034581, 0.1934472670871598, 0.4007834230632086, 0.0277777777777778},
           {0.015625, 0.078125, 0.03125, 0.078125, 0.390625, 0.15625, 0.03125, 0.15625, 0.0625},
           {0.25, 0.25, 0., 0.25, 0.25, 0., 0., 0., 0.},
           {0., 0., 0.5, 0., 0., 0.5, 0., 0., 0.},
           {0., 0., 0., 0., 0., 0., 0.5, 0.5, 0.},
           {0., 0., 0., 0., 0., 0., 0., 0., 1.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdxi = {
          {{-0.0176104054504323, 0.0081730176127763, 0.0094373878376559, -0.2805021169820366, 0.1301814855409225,
            0.150320631441114, -0.4905626121623441, 0.2276709006307398, 0.2628917115316043},
           {-0.0625, -0.0625, 0.125, -0.3125, -0.3125, 0.625, -0.125, -0.125, 0.25},
           {-0.5, 0.5, 0., -0.5, 0.5, 0., -0., 0., 0.},
           {0., -1., 1., -0., -1., 1., 0., -0., 0.},
           {-0., 0., 0., -0., 0., 0., -1., 1., 0.},
           {0., -0., 0., -0., -0., 0., 0., -2., 2.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectdNdeta = {
          {{-0.0657229278829011, -0.1361645496846301, -0.0094373878376559, -0.424839684279443, -0.8801814855409225,
            -0.0610042339640731, 0.4905626121623441, 1.0163460352255527, 0.070441621801729},
           {-0.0625, -0.3125, -0.125, -0.0625, -0.3125, -0.125, 0.125, 0.625, 0.25},
           {-0.5, -0.5, -0., 0.5, 0.5, 0., 0., 0., 0.},
           {-0., -0., -1., 0., 0., 1., 0., 0., 0.},
           {0., 0., 0., -1., -1., -0., 1., 1., 0.},
           {0., 0., 0., -0., -0., -2., 0., 0., 2.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxixi = {
          {{0.0223290993692602, -0.0669872981077807, 0.0446581987385205, 0.3556624327025936, -1.0669872981077807,
            0.7113248654051871, 0.6220084679281462, -1.8660254037844386, 1.2440169358562924},
           {0.125, -0.375, 0.25, 0.625, -1.875, 1.25, 0.25, -0.75, 0.5},
           {0.5, -1.5, 1.0, 0.5, -1.5, 1.0, 0., 0., 0.},
           {0.5, -1.5, 1., 0.5, -1.5, 1., 0., -0., 0.},
           {0., -0., 0., 0., 0., 0., 1., -3., 2.},
           {0., -0., 0., 0., -0., 0., 1., -3., 2.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdetaeta = {
          {{0.3110042339640731, 0.6443375672974064, 0.0446581987385205, -0.9330127018922193, -1.9330127018922193,
            -0.1339745962155614, 0.6220084679281462, 1.2886751345948129, 0.0893163974770409},
           {0.125, 0.625, 0.25, -0.375, -1.875, -0.75, 0.25, 1.25, 0.5},
           {0.5, 0.5, 0., -1.5, -1.5, 0., 1.0, 1.0, 0.},
           {0., 0., 1., -0., 0., -3., 0., 0., 2.},
           {0.5, 0.5, 0., -1.5, -1.5, -0., 1., 1., 0.},
           {0., 0., 1., -0., -0., -3., 0., 0., 2.}}
      };

      std::array<Eigen::Vector<double, 9>, numTestPos> expectddNdxieta = {
          {{0.1666666666666667, -0.0773502691896258, -0.0893163974770409, 1.0773502691896258, -0.5, -0.5773502691896258,
            -1.2440169358562924, 0.5773502691896258, 0.6666666666666667},
           {0.25, 0.25, -0.5, 0.25, 0.25, -0.5, -0.5, -0.5, 1.},
           {1., -1., 0., -1., 1., 0., 0., 0., 0.},
           {0., 2., -2., -0., -2., 2., 0., -0., -0.},
           {0., 0., 0., 2., -2., -0., -2., 2., -0.},
           {0., -0., -0., 0., 4., -4., -0., -4., 4.}}
      };
      return std::make_tuple(expectN, expectdNdxi, expectdNdeta, expectddNdxixi, expectddNdetaeta, expectddNdxieta);
    }
  } else
    DUNE_THROW(Dune::NotImplemented,
               "ShapeFunctionsAndDerivativesIGAResults not implemented for the provided refinement level");
}